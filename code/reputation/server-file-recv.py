# Script running on computer which receives files from another computer.
# It checks for reputation score of computer from which it is receiving file
# and uses that reputation score to decide if file may be malicious or not.

import os.path
import socket
import json
with open('setting.json') as json_data:
    setting = json.load(json_data)
from threading import Thread
from SocketServer import ThreadingMixIn
from reputation import *

TCP_IP = setting['TCP_IP']
TCP_PORT = setting['TCP_PORT']
BUFFER_SIZE = setting['BUFFER_SIZE']

# Creating a thread for each client to receive files from different computers simulataneously
class ClientThread(Thread):
    # Intialisation at start of thread for each client
    def __init__(self,mac_address,port,sock):
        Thread.__init__(self)
        self.mac_address = mac_address
        self.port = port
        self.sock = sock
        print " New thread started for "+mac_address+":"+str(port)

    # Receive file
    def recv_file(self):
        filename = ""
        # Receive and extract filename which is send at start of socket stream
        while True:
            d = self.sock.recv(1)
            if d == '\n':
                break
            filename += d
        # Generate a unique filename for each file received
        received_file = mac_address+":"+str(port)+filename
        # extension = os.path.splitext(filename)[1]

        # Saving the stream of bytes in a file identified by received_file identifier
        with open(received_file, 'wb') as f:
            while True:
                #print('receiving data...')
                data = self.sock.recv(BUFFER_SIZE)
                # print('data=%s', (data))
                if not data:
                    f.close()
                    break
                f.write(data)
                print " File received from "+mac_address+":"+str(port)

        # Call cuckoo API for analysis
        # {
        #
        # }


    # Function to perform score check
    def run(self):
        createEntryFlag = False
        reputation = Reputation()
        db_data = reputation.getData(mac_address)
        # Handle the case if no data in db_data
        if (db_data is None):
            createEntryFlag = True
        else:
            db_mac_address = db_data[0]
            db_connection_attempts = db_data[1]
            db_reputation_score = db_data[2]

            if (db_connection_attempts < THRESHOLD_CONN):
                recv_file()
            else if (db_connection_attempts > THRESHOLD_CONN):
                # Discard file if score is less than threshold minimum score
                if (db_reputation_score > THRESHOLD_SCORE):
                    recv_file()
                else:
                    print "Discarding file"

        reputation.updateConnectionAttempts(mac_address, createEntryFlag)



# Socket creation and setup
tcpsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
tcpsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
tcpsock.bind((TCP_IP, TCP_PORT))
threads = []

# Listen to client connection request
while True:
    tcpsock.listen(5)
    print "Waiting for incoming connections..."
    # Accept connection request from a client
    (conn, (mac_address,port)) = tcpsock.accept()
    print 'Got connection from ', (mac_address,port)
    # Spawn a new thread for each client to perform receive operation
    newthread = ClientThread(mac_address,port,conn)
    newthread.start()
    threads.append(newthread)

for t in threads:
    t.join()
